//Practical 6
import java.util.*;
class Patient {
 private String name;
 private int priority;
 public Patient(String name, int priority) {
 this.name = name;
 this.priority = priority;
 }
 public int getPriority() {
 return priority;
 }
 @Override
 public String toString() {
 return name + " (Priority: " + priority + ")";
 }
}
class PatientComparator implements Comparator<Patient>
{
 @Override
 public int compare(Patient p1, Patient p2) {
 int pt1 = p1.getPriority();
 int pt2 = p2.getPriority();
 if (pt1 > pt2) {
 return -1;
 } else if (pt1 < pt2) {
 return 1;
 }
 return 0;
 }
}
public class PriorityQueueDemo {
 public static void main(String[] args) {
 Patient p1 = new Patient("A", 2);
 Patient p2 = new Patient("B", 30);
 Patient p3 = new Patient("C", 21);
 Patient p4 = new Patient("D", 56);
 Patient p5 = new Patient("E", 6);
 Patient p6 = new Patient("F", 10);
 PriorityQueue<Patient> pq = new
PriorityQueue<>(new PatientComparator());
 pq.add(p1);
 pq.add(p2);
 pq.add(p3);
 pq.add(p4);
 pq.add(p5);
 pq.add(p6);
 System.out.println("Patients in priority
order:");
 while (!pq.isEmpty()) {
 System.out.println(pq.poll());
 }
 pq.add(p1);
 pq.add(p2);
 pq.add(p3);
 pq.add(p4);
 pq.add(p5);
 pq.add(p6);
 pq.poll();
 pq.poll();
 System.out.println("\nAfter executing pq.poll()
twice:");
 System.out.println(pq.peek());
 pq.remove();
 System.out.println("After executing
pq.remove():");
 System.out.println(pq.peek());
 pq.remove(p5);
 System.out.println("After executing
pq.remove(p5):");
 System.out.println(pq.peek());
 }
}
//Practical 7
interface InfBankA
